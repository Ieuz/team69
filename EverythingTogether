import random as r
import math as m

def create_profile():
    categories = ["running", "indoor cardio", "weight training", "muscle groups", "bodyweight training", "core strength"]
    equipment = ["dumbells", "resistance band", "barbell", "pullup bar"]

    
    name = input("Please enter your name: ")
    print("Categories:\nrunning, indoor cardio,\nweight training,\nmuscle groups, bodyweight training,\ncore strength\n\n")
    print("Which categories of workout are you interested in? Please enter your answers as a list seperated by commas\n(In the format 'running,core strength,indoor cardio')")
    user_cats = input(">>>")
    user_cats_lst = user_cats.split(",")
    cats_lst = []
    ccl = False
    

    for wrkout in user_cats_lst:
        if wrkout in categories:
            if wrkout not in cats_lst:
                cats_lst.append(wrkout)
        else:
            workout = wrkout
            while workout not in categories:
                ccl = False
                print(f"Workout {workout} was not recognised, type the workout you meant or type CANCEL to cancel")
                workout = input(">>>")
                if workout == "CANCEL" or workout == "cancel":
                    ccl = True
                    break
            if ccl != True:
                cats_lst.append(workout)

    if "running" in cats_lst:
        targ_dist = input("What is your target distance in km?")
        max_dist = input("What is your current estimated maximum distance in km?")
        avg_pace = input("What is your average pace in minutes per kilometer?")


    print("Please enter which equipment you own from this list, seperated by commas:\ndumbells, resistance band,\nbarbell, pullup bar")
    user_eqip = input(">>>")
    user_eqip_lst = user_eqip.split(",")
    equipment_list = []
    

    for equipment_piece in user_eqip_lst:
        if equipment_piece in equipment:
            if equipment_piece not in equipment_list:
                equipment_list.append(equipment_piece)
        else:
            equip_piec = equipment_piece
            print(equip_piec)
            print(equip_piec in equipment)
            print(equipment)
            while equip_piec not in equipment:
                ccl = False
                print(f"Equipment piece {equipment_piece} was not recognised, type the equipment you meant or type CANCEL to cancel")
                equip_piec = input(">>>")
                if equip_piec == "CANCEL" or equip_piec == "cancel":
                    ccl = True
                    break
            if ccl != True:
                equipment_list.append(equip_piec)

    print(cats_lst)
    print(equipment_list)

    name_file = name + ".csv"


    with open(name_file, "w") as f:
        f.write(name+"\n")
        f.write(str(cats_lst)[1:-1]+"\n")
        f.write(str(equipment_list)[1:-1]+"\n")
        if "running" in cats_lst:
            f.write(targ_dist + "," + max_dist + "," + avg_pace)


            
def generate_bcurl(user,diff):
    bcurl_reps=user["max_bcurls"]
    new_reps=bcurl_reps+diff*2
    print(f"Do {new_reps} bicep curls")


def generate_tcurl(user,diff):
    tcurl_reps=user["max_tcurls"]
    new_reps=tcurl_reps+diff*2
    print(f"Do {new_reps} tricep curls")


def generate_shoulderpress(user,diff):
    spress_reps=user["max_spresses"]
    new_reps=spress_reps+diff*2
    print(f"Do {new_reps} shoulder presses")


def generate_chestpress(user,diff):
    cpress_reps=user["max_cpresses"]
    new_reps=cpress_reps+diff*2
    print(f"Do {new_reps} chest presses")


def generate_lateralraise(user,diff):
    lraise_reps=user["max_lraises"]
    new_reps=lraise_reps+diff*2
    print(f"Do {new_reps} lateral raises")


def dumbell(user,diff):
    print("Your workout with dumbells is as follows:")

    exercises=["bicep curl","tricep curl","shoulder press","chest press","lateral raise"]
    workout=[]

    exercise_counts=[5,7,10,12]
    for i in range(exercise_counts[diff]):
        workout.append(r.choice(exercises))

    for exercise in workout:
        if exercise=="bicep curl":
            generate_bcurl(user,diff)
        elif exercise=="tricep curl":
            generate_tcurl(user,diff)
        elif exercise=="shoulder press":
            generate_shoulderpress(user,diff)
        elif exercise=="chest press":
            generate_chestpress(user,diff)
        elif exercise=="lateral raise":
            generate_lateralraise(user,diff)

def generate_plank(user):
    
    #Take the details of the users current planking ability
    plank_mins = user["current_plank"]["mins"]
    plank_secs = user["current_plank"]["secs"]
    
    #Convert that into just minutes (demimal)
    base_time = plank_mins + plank_secs/60
    
    #add up to 30 seconds to the plank
    added_secs = r.randint(0, 30)/60
    target_plank_mins = base_time + added_secs
    
    #convert back into mins and secs
    target_plank_mins_secs = m.modf(target_plank_mins)
    target_plank_time = (int(target_plank_mins_secs[1]), round(target_plank_mins_secs[0]*60))
    
    #return an instruction to be printed to the user
    print(f"Plank for {target_plank_time[0]} minute(s) and {target_plank_time[1]} seconds")
    return target_plank_time


def generate_pressup(user, diff):
    
    #Take the details of the users current press up ability
    pressup_reps = user["max_pressups"]
    
    #add up to a 15% increase in number of reps (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_reps = int(pressup_reps * increase)
    
    #decide upon variation
    variations = ["standard", "diamond", "wide hands"]
    variation = r.choice(variations)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_reps} {variation} press ups.")
    return new_reps

def generate_squat(user, diff):
    
    #Take the details of the users current press up ability
    max_squats = user["max_squats"]
    
    #add up to a 15% increase in number of reps (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_reps = int(max_squats * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_reps} squats.")
    return new_reps

def generate_situp(user, diff):
    
    #Take the details of the users current press up ability
    situp_reps = user["max_situps"]
    
    #add up to a 15% increase in number of reps (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_reps = int(situp_reps * increase)
    
    #decide upon variation
    variations = ["sit ups", "crunches"]
    variation = r.choice(variations)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_reps} {variation}.")
    return new_reps

def bodyweight(user, diff):
    
    print("Your bodyweight workout is as follows:")
    
    exercises = ["plank", "press up", "squat", "sit up"]
    workout = []
    
    #Chose what workouts to do, in what order
    exercise_counts = [7, 10, 12, 15]
    for i in range(exercise_counts[diff]):
        workout.append(r.choice(exercises))
    
    #Generate a unique instruction for each exercise in this workout
    for exercise in workout:
        if exercise == "plank":
            generate_plank(user)
        elif exercise == "press up":
            generate_pressup(user, diff)
        elif exercise == "squat":
            generate_squat(user, diff)
        else:
            generate_situp(user, diff)
            
def generate_onearmbcurl(user,diff):
    onearmcurl_reps=user["max_onearmcurls"]
    new_reps=onearmcurl_reps+diff*2
    print(f"Do {new_reps} one arm bicep curls")

def generate_flye(user,diff):
    flye_reps=user["max_flyes"]
    new_reps=flye_reps+diff*2
    print(f"Do {new_reps} Flyes")

def generate_frsquats(user,diff):
    frsquat_reps=user["max_frsquats"]
    new_reps=frsquat_reps+diff*2
    print(f"Do {new_reps} front squats")

def generate_splitter(user,diff):
    splitter_reps=user["max_splitters"]
    new_reps=splitter_reps+diff*2
    print(f"Do {new_reps} splitters")

def generate_latwalks(user,diff):
    latwalk_reps=user["max_latwalks"]
    new_reps=latwalk_reps+diff*2
    print(f"Do {new_reps} lateral walk reps")

def Rband(user,diff):
    print("Your workout with the resistance band is as follows:")

    exercises=["one-arm bicep curl","flye","front squat","splitter","lateral walk"]
    workout=[]

    exercise_counts=[5,7,10,12]
    for i in range(exercise_counts[diff]):
        workout.append(random.choice(exercises))

    for exercise in workout:
        if exercise=="one-arm bicep curl":
            generate_onearmbcurl(user,diff)
        elif exercise=="flye":
            generate_flye(user,diff)
        elif exercise=="front squat":
            generate_frsquats(user,diff)
        elif exercise=="splitter":
            generate_splitter(user,diff)
        elif exercise=="lateral walk":
            generate_latwalks(user,diff)
    
def running_on_the_spot(user,diff):
    
    #Take the details of the users curent running ability
    running_time = user["max_running_time"]
    
    #add up to a 15% increase in running time (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_time = int(running_time * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_time} minutes of running on the spot.")
    return new_time

def squats(user, diff):
    
    #Take the details of the users current squats ability
    max_squats = user["max_squats"]
    
    #add up to a 15% increase in number of reps (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_reps = int(max_squats * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_reps} squats.")
    return new_reps

def high_knees(user,diff):
    #Take the details of the users current high knees max time
    max_time = user["max_high_knees"]
    
    #add up to a 15% increase in number of time (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_time = int(max_time * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_time} minutes of high knees.")
    return new_time

def burpees(user,diff):
    #Take the details of the users current max burpees
    max_burpee = user["max_burpees"]
    
    #add up to a 15% increase in number of reps (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_burpee = int(max_burpee * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_burpee} burpees.")
    return new_burpee
 
def skaters(user,diff):
    #Take the details of the users current skaters max time
    max_time = user["max_skaters"]
    
    #add up to a 15% increase in time (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_time = int(max_time * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_time} minutes of skaters.")
    return new_time

def mountain_climbers(user,diff):
    #Take the details of the users current mountain climbers max time
    max_time = user["max_mountain_climbers"]
    
    #add up to a 15% increase in time (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_time = int(max_time * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_time} minutes of mountain climbers.")
    return new_time

def up_down_plank(user,diff):
    #Take the details of the users current up down plank max time
    max_time = user["max_up_down_plank"]
    
    #add up to a 15% increase in time (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_time = int(max_time * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_time} minutes of up down planks.")
    return new_time

def plank(user,diff):
    #Take the details of the users current max plank time
    max_time = user["max_plank"]
    
    #add up to a 15% increase in time (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_time = int(max_time * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_time} minutes of the plank.")
    return new_time

def side_plank(user,diff):
    #Take the details of the users current max side plank time
    max_time = user["max_side_plank"]
    
    #add up to a 15% increase in time (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_time = int(max_time * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_time} minutes of side planks.")
    return new_time

def star_jumps(user,diff):
    #Take the details of the users current max star jumps
    max_star_jumps = user["max_star_jumps"]
    
    #add up to a 15% increase in number of reps (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_star_jumps = int(max_star_jumps * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_star_jumps} star jumps.")
    return new_star_jumps

def tuck_jumps(user,diff):
    #Take the details of the users current max tuck jumps
    max_tuck_jumps = user["max_tuck_jumps"]
    
    #add up to a 15% increase in number of reps (dependent upon difficulty)
    increase = diff*0.05 + 1
    new_tuck_jumps = int(max_tuck_jumps * increase)
    
    #Return the instruction to be printed to the user
    print(f"Do {new_tuck_jumps} tuck jumps.")
    return new_tuck_jumps
    
def cardio_workout(user, diff):
    
    print("Your cardio workout is as follows:")
    
    exercises = ["running on the spot","squats","high knees","burpees","skaters","mountain climbers","up down planks","plank","side planks","star jumps","tuck jumps"]
    workout = []
    
    #Chose what workouts to do, in what order
    exercise_counts = [7, 10, 12, 15]
    for i in range(exercise_counts[diff]):
        workout.append(r.choice(exercises))
    
    #Generate a unique instruction for each exercise in this workout
    for exercise in workout:
        if exercise == "running on the spot":
            running_on_the_spot(user,diff)
        elif exercise == "squats":
            squats(user,diff)
        elif exercise == "high knees":
            high_knees(user,diff)
        elif exercise == "burpees":
            burpees(user,diff)
        elif exercise == "skaters":
            skaters(user,diff)
        elif exercise == "mountain climbers":
            mountain_climbers(user,diff)
        elif exercise == "up down planks":
            up_down_plank(user,diff)
        elif exercise == "plank":
            plank(user,diff)
        elif exercise == "side planks":
            side_plank(user,diff)
        elif exercise == "star jumps":
            star_jumps(user,diff)
        else:
            tuck_jumps(user,diff)
            
            
def read_profile(name):
    users = {}
    users["Ieuan"] = {"max_exercises":{"current_plank":{"mins":2, "secs":40},
        "max_pressups":30, "max_squats":15,
        "max_situps":30, "max_tuck_jumps":12,
        "max_star_jumps":30, "max_side_plank":2,
        "max_plank":2, "max_up_down_plank":2, "max_mountain_climbers":45,
        "max_skaters":45, "max_burpees":25, "max_high_knees":50, "max_running_time":30, "max_bcurls":2,
        "max_tcurls":4,"max_spresses":6,"max_cpresses":8,"max_lraises":10,
        "max_pullups":2,"max_chinups":4,"max_muscleups":6,"max_ktes":8,"max_hkrs":10,
        "max_barbcurls":2,"max_barbsquats":4,"max_benchpressreps":6,"max_deadlifts":8,"max_barbspresses":10
                                 }, "difficulty":2}
    return users[name]

def generate_barbcurl(user,diff):
    barbcurl_reps=user["max_barbcurls"]
    new_reps=barbcurl_reps+diff*2
    print(f"Do {new_reps} barbell bicep curls")

def generate_barbsquat(user,diff):
    barbsquat_reps=user["max_barbsquats"]
    new_reps=barbsquat_reps+diff*2
    print(f"Do {new_reps} barbell squats")

def generate_benchpress(user,diff):
    benchpress_reps=user["max_benchpressreps"]
    new_reps=benchpress_reps+diff*2
    print(f"Do {new_reps} bench press reps")

def generate_deadlift(user,diff):
    deadlift_reps=user["max_deadlifts"]
    new_reps=deadlift_reps+diff*2
    print(f"Do {new_reps} deadlifts")

def generate_barbspress(user,diff):
    barbspress_reps=user["max_barbspresses"]
    new_reps=barbspress_reps+diff*2
    print(f"Do {new_reps} barbell shoulder presses")

def barbell(user,diff):
    print("Your workout with a barbell and a bench is as follows:")

    exercises=["barbell bicep curl","barbell squat","bench press","deadlift","barbell shoulder press"]
    workout=[]

    exercise_counts=[5,7,10,12]
    for i in range(exercise_counts[diff]):
        workout.append(r.choice(exercises))

    for exercise in workout:
        if exercise=="barbell bicep curl":
            generate_barbcurl(user,diff)
        elif exercise=="barbell squat":
            generate_barbsquat(user,diff)
        elif exercise=="bench press":
            generate_benchpress(user,diff)
        elif exercise=="deadlift":
            generate_deadlift(user,diff)
        elif exercise=="barbell shoulder press":
            generate_barbspress(user,diff)

def generate_pullup(user,diff):
    pullup_reps=user["max_pullups"]
    new_reps=pullup_reps+diff*2
    print(f"Do {new_reps} pull-ups")

def generate_chinup(user,diff):
    chinup_reps=user["max_chinups"]
    new_reps=chinup_reps+diff*2
    print(f"Do {new_reps} chin-ups")

def generate_muscleup(user,diff):
    muscleup_reps=user["max_muscleups"]
    new_reps=muscleup_reps+diff*2
    print(f"Do {new_reps} muscle-ups")

def generate_kneestoelbows(user,diff):
    kte_reps=user["max_ktes"]
    new_reps=kte_reps+diff*2
    print(f"Do {new_reps} knees to elbows reps")

def generate_hangingkneeraise(user,diff):
    hkr_reps=user["max_hkrs"]
    new_reps=hkr_reps+diff*2
    print(f"Do {new_reps} hanging knee raises")

def PullUpBar(user,diff):
    print("Your workout with the pull up bar is as follows:")

    exercises=["pull up","chin up","muscle up","knees to elbows","hanging knee raise"]
    workout=[]

    exercise_counts=[2,4,6,7]
    for i in range(exercise_counts[diff]):
        workout.append(r.choice(exercises))

    for exercise in workout:
        if exercise=="pull up":
            generate_pullup(user,diff)
        elif exercise=="chin up":
            generate_chinup(user,diff)
        elif exercise=="muscle up":
            generate_muscleup(user,diff)
        elif exercise=="knees to elbows":
            generate_kneestoelbows(user,diff)
        elif exercise=="hanging knee raise":
            generate_hangingkneeraise(user,diff)


def login():
    cont = True
    
    while cont:
        print("Would to log in or sign up?")
        login_bool = input(">>>")
        
        if login_bool.lower() == "sign up":
            create_profile()
            cont = False
            
        elif login_bool.lower() == "log in":
            logging_in = True
            while logging_in:
                try: 
                    print("What is your profile name?")
                    profile_name = input(">>>")
                    user = read_profile(profile_name)
                    logging_in = False
                    cont = False
                    return user
                except:
                    print("This profile name does not exist. Please try again.")
        else:
            print("This is not a valid input. Please type 'log in' or 'sign up'.")


def main():
 
    print("Welcome to the workout master 3000!")
    
    user = login()
    
    cont = "Y"
    while cont == "Y":
                
        print("Please enter a command or type 'HELP' for a list of commands.")
        commands = {"BODYWEIGHT":"Provides a bodyweight workout", "WEIGHT":"Provides a workout using equipement",
                    "CARDIO":"Provides an indoor cardio workout", "RUNNING":"Provides a running workout",
                    "HELP":"Lists all commands", "QUIT": "Quits the program"}
        inp = input(">>>")
        
        try:
            if inp.upper() == "BODYWEIGHT":
                bodyweight(user["max_exercises"], user["difficulty"])
            elif inp.upper() == "CARDIO":
                cardio_workout(user["max_exercises"], user["difficulty"])
            elif inp.upper() == "WEIGHT":
                print("Do you want to use one of your pieces of equipment, or just recieve a random workout?")
                print("Please input either the name of the equipment, or type 'random'.")
                choice = input(">>>")
                choice = choice.upper()
                choices = {"DUMBELLS":dumbell, "RESISTANCE BANDS":Rband, "BARBELL":barbell, "PULL UP BAR":PullUpBar, "RANDOM":-1}
                while choice not in choices:
                    print(f"That is not a valid input. PLease type one of the following:\n {choices.keys()}")
                    choice = input(">>>")
                    choice = choice.upper()
                if choice == "RANDOM":
                    choice = r.choice(["DUMBELLS", "RESISTANCE BANDS", "BARBELL", "PULL UP BAR"])
                choices[choice](user["max_exercises"], user["difficulty"])
                
            elif inp.upper() == "HELP":
                print("Here is a list of all commands:")
                for command in commands:
                    print(command, ":", commands[command])

            elif inp.upper() == "QUIT":
                print("See you next time!")
                break

            else:
                assert False
            
        except:
            print("Program error, please try again.")
    
    

    
main()
